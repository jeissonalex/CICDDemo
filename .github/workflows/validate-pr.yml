name: Check Pull Request
on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - force-app/**
    branches:
      - develop
# Job to check PMD Rules
jobs:
  pmd_job:
    runs-on: ubuntu-latest
    name: Check PMD Rules
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Run PMD
      uses: kemsakurai/action-pmd@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: 'github-pr-review'
        tool_name: 'pmd_reviewdog'
        src_path: 'force-app/main/default/classes/'
        rulesets_path: 'PMDRules/PMDRules.xml'
        filter_mode: diff_context
    #Steps to identify how many violations and fail the job
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    - uses: pmd/pmd-github-action@v1
      id: pmd
      with:
        version: '6.40.0'
        sourcePath: 'force-app/main/default/classes/'
        rulesets: 'PMDRules/PMDRules.xml'
        analyzeModifiedFilesOnly: true
    - name: Fail build if there are violations
      if: steps.pmd.outputs.violations != 0
      uses: actions/github-script@v3
      with:
         script: |
                 core.setFailed('There are ' + ${{steps.pmd.outputs.violations}} + ' violations to PMD Rules, please fix them')
  # Job to Prevalidate components Next Org
  validate-pr:
    needs:  [pmd_job]
    runs-on: ubuntu-latest
    name: Prevalidate components Next Org
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "14"
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Salesforce CLI
        run: >
          wget
          https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz

          mkdir ~/sfdx

          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1

          echo "$HOME/sfdx/bin" >> $GITHUB_PATH

          ~/sfdx/bin/sfdx version
      - name: Populate auth file with SFDX_URL secret of target org
        run: |
          echo ${{ secrets.SFDC_DEVELOP}} > ./SFDC_DEVELOP.txt
      - name: Authenticate to target Org
        run: sfdx auth:sfdxurl:store -f ./SFDC_DEVELOP.txt -s -a targetOrg
      - name: Installing sfdx git delta
        run: |
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins 
      - name: Create delta packages for new, modified or deleted metadata
        run: >
          mkdir changed-sources

          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 
      - name: Listing Changed Sources
        run: >
          ls -R changed-sources
          pwd
      - name: Read PR Body
        env:
          PR_BODY: ${{github.event.pull_request.body}}
        run: |
          FILE=./parsePR.js 
          if test -f "$FILE"; then
              echo $PR_BODY > ./pr_body.txt
              node ./parsePR.js              
              TESTS=$(cat testsToRun.txt)
              echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV     
          else
              TESTS=all
              echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV 
          fi
          
      - name: Deployment - run specified tests
        if: ${{ env.APEX_TESTS != 'all' }}
        run: >
          echo ${{env.APEX_TESTS}}

          sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json
      - name: Deployment - run all tests
        if: ${{ env.APEX_TESTS == 'all' }}
        run: >
          echo ${{env.APEX_TESTS}}

          sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests --json
